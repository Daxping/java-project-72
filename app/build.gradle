plugins {
    id 'application'
    id 'java'
    id 'checkstyle'
    id 'com.adarshr.test-logger' version '3.2.0'
    id 'jacoco'
    id 'io.ebean' version '13.6.5'
    id 'com.github.ben-manes.versions' version '0.39.0'
}

group = 'hexlet.code'
version = '1.0.3-SNAPSHOT'

application {
    mainClass = 'hexlet.code.App'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'io.javalin:javalin:4.0.1'
    implementation 'org.slf4j:slf4j-simple:1.7.31'
    implementation 'org.thymeleaf:thymeleaf:3.0.12.RELEASE'
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.0.0'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-java8time:3.0.4.RELEASE'
    implementation 'com.h2database:h2:1.4.200'

    implementation 'io.ebean:ebean:13.11.0'
    implementation 'io.ebean:ebean-ddl-generator:13.11.0'
    implementation 'io.ebean:ebean-querybean:13.11.0'
    implementation 'io.ebean:ebean-migration:13.6.2'
    implementation 'io.ebean:ebean-annotation:8.3'
    annotationProcessor 'io.ebean:querybean-generator:13.11.0'

    implementation 'org.glassfish.jaxb:jaxb-runtime:2.3.5'
    implementation 'javax.activation:activation:1.1.1'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
    testImplementation 'org.assertj:assertj-core:3.19.0'
    testImplementation 'io.ebean:ebean-test:12.11.5'
    testImplementation 'com.konghq:unirest-java:3.13.0'
}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    jacoco {
        enabled = true
        destinationFile = layout.buildDirectory.file("jacoco/${name}.exec").get().asFile
        includes = []
        excludes = []
        excludeClassLoaders = []
        includeNoLocationClasses = false
        sessionId = "<auto-generated value>"
        dumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        jmx = false
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = true
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

compileJava {
    options.release = 17
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

tasks.withType(Checkstyle) {
    reports {
        xml.required = false
        html.required = true
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
    }

testlogger {
    showStandardStreams = true
    }
}